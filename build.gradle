group 'com.template'
version '1.0-SNAPSHOT'


buildscript {
    ext {
        springBootVersion = '2.2.4.RELEASE'
        springDependencyManagementVersion = '1.0.8.RELEASE'
        liquibasePluginVersion = '1.2.4'
        liquibaseCoreVersion = '3.5.5'
        postgresDriverVersion = '42.2.5'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion"
        classpath "org.ajoberstar:gradle-git:1.7.2"
        classpath("org.liquibase:liquibase-gradle-plugin:${liquibasePluginVersion}") {
            exclude group: 'org.liquibase', module: 'liquibase-core'
        }
        classpath "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
        classpath "org.postgresql:postgresql:$postgresDriverVersion"
    }
}

ext {
    springVersion = '5.2.3.RELEASE'
    springDataVersion = '2.2.4.RELEASE'
    springBootVersion = '2.2.4.RELEASE'
    postgresDriverVersion = '42.2.5'
    slf4jVersion = '1.7.26'
    logbackVersion = '1.2.3'
    junitVersion = '5.7.2'
    liquibaseVersion = '4.4.3'
    modelMapperVersion = '2.4.4'
    commonsLangVersion = '3.12.0'
    lombokVersion = '1.18.20'
    hikariCPVersion = '5.0.0'
    javaxServletVersion = '3.1.0'
    javaxPersistenceVersion = '2.2'
    tomcatVersion = '2.5.4'
}

def defaultEncoding = 'UTF-8'

def environment() {
    project.hasProperty('env') ? project.getProperty('env') : 'dev'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.ajoberstar.grgit'
    apply plugin: 'org.liquibase.gradle'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    ext {
        appName = 'Template'

        env = environment()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        compile {
            exclude module: 'spring-boot-starter-reactor-netty'
            exclude group: 'io.netty'
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    compileJava {
        options.encoding = defaultEncoding
    }

    compileTestJava {
        options.encoding = defaultEncoding
    }

    test {
        useJUnitPlatform()
        ignoreFailures = true
    }

    dependencyManagement {
        dependencies {
            dependency "org.slf4j:slf4j-api:$slf4jVersion"
            dependency "org.slf4j:log4j-over-slf4j:$slf4jVersion"
            dependency "org.slf4j:jcl-over-slf4j:$slf4jVersion"
            dependency "ch.qos.logback:logback-core:$logbackVersion"
            dependency "ch.qos.logback:logback-classic:$logbackVersion"

            dependency "javax.servlet:javax.servlet-api:$javaxServletVersion"
            dependency "javax.persistence:javax.persistence-api:$javaxPersistenceVersion"

            dependency "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
            dependency "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
            dependency "org.springframework.boot:spring-boot-starter-tomcat:$tomcatVersion"

            dependency "org.postgresql:postgresql:$postgresDriverVersion"
            dependency "com.zaxxer:HikariCP:$hikariCPVersion"

            dependency "org.projectlombok:lombok:$lombokVersion"
            dependency "org.modelmapper:modelmapper:$modelMapperVersion"
            dependency "org.liquibase:liquibase-core:$liquibaseVersion"

            dependency "org.apache.commons:commons-lang3:$commonsLangVersion"

            dependency("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
                exclude "junit:junit"
            }

            dependency "org.junit.jupiter:junit-jupiter:$junitVersion"
        }
    }
}

